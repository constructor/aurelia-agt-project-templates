using CLIC.Models;
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using CLIC.Services;
using CLICServices.Models;
using Newtonsoft.Json;
using CLIC.Utils;

namespace CLIC.Data
{
    public static class TemplateData
    {
        const string padding = ScreenOutputService.Padding;

        public static List<TemplateItem> AllTemplates { get; set; }

        static TemplateData()
        {
            AllTemplates = GetTemplateData();
        }

        static List<TemplateItem> GetTemplateData()
        {
            var t = IOUtils.LoadTemplateItemsData();
            //ExampleJsonOutput();
            return t;
        }

        private static void ExampleJsonOutput()
        {
            var temp = new List<TemplateItem>();

            var t1 = new TemplateItem { TemplateId = 1, TemplateLabel = "", Name = ".NET Core CLI tools MVC project", Description = "A 'dotnet new mvc' project generated by .NET Core CLI tools", AureliaRoot = "/" };
            var t2 = new TemplateItem { TemplateId = 2, TemplateLabel = "", Name = "VS2017 .NET Core MVC", Description = "Visual Studio 2017 .Net Core 2.2 MVC with Identity", AureliaRoot = "/{ProjectName}" };
            var t3 = new TemplateItem { TemplateId = 3, TemplateLabel = "", Name = "VS2017 .NET Core MVC New", Description = "Visual Studio 2017 .Net Core 2.2 MVC with Identity (NEW)", AureliaRoot = "/{ProjectName}" };

            var tft_Startup = new TemplateFileTransform { FileName = "./Startup.cs" };
            tft_Startup.StringReplacements.Add("using Site.Data;", "using { ProjectName}.Data");
            t3.TemplateFileTransform.Add(tft_Startup);

            var tft_HomeController = new TemplateFileTransform { FileName = "./Controllers/HomeController.cs" };
            tft_HomeController.StringReplacements.Add("using Site.Data;", "using { ProjectName}.Data");
            t3.TemplateFileTransform.Add(tft_HomeController);

            var tft_TokenController = new TemplateFileTransform { FileName = "./Controllers/TokenController.cs" };
            tft_TokenController.StringReplacements.Add("using Site.Data;", "using { ProjectName}.Data");
            t3.TemplateFileTransform.Add(tft_TokenController);

            temp.Add(t1);
            temp.Add(t2);
            temp.Add(t3);

            var json = JsonConvert.SerializeObject(temp);
        }

        public static string GetTempateDataOutput()
        {
            var o = String.Join(Environment.NewLine, AllTemplates.Select(x => $"{padding}[{x.TemplateId}] {x.Name} : {x.Description}"));
            return o;
        }
    }
}
